package main

import (
	"encoding/json"
	"fmt"
	"os"
	"strconv"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"

    {{ range $i := .Imports -}}
    "{{$i}}"
    {{ end -}}
)

{{.String}}

// put extracts the {{.Type}} from JSON and writes it to DynamoDB
func put(body string) ({{.Type}}, error) {
    var sess *session.Session
	var tableName string
	
	local, err := strconv.ParseBool(os.Getenv("AWS_SAM_LOCAL"))
	if err != nil {
		return {{.Type}}{}, err
	}
	// Create dynamo client object locally if running SAM CLI
	if local {
		sess = session.Must(session.NewSession(&aws.Config{
			Endpoint: aws.String("http://dynamodb:8000"),
		}))
		tableName = "{{.Ident.Pluralize.ToLower}}"
	} else {
		sess = session.Must(session.NewSession())
		tableName = os.Getenv("{{.Ident.ToUpper}}_TABLE_NAME")
	}
	svc := dynamodb.New(sess)

	// Marshall the requrest body
	var {{.Ident.Camelize}} {{.Type}}
	json.Unmarshal([]byte(body), &{{.Ident.Camelize}})

	// Generate new UUID to store {{.Type}} in case {{.Ident.Camelize}} doesn't have one
    if {{.Ident.Camelize}}.ID == uuid.Nil {
        id, _ := uuid.NewV4()
        {{.Ident.Camelize}}.ID = id
    }

	// Marshall the Item into a Map DynamoDB can deal with
	av, err := dynamodbattribute.MarshalMap({{.Ident.Camelize}})
	if err != nil {
		fmt.Println("Got error marshalling map:")
		fmt.Println(err.Error())
		return {{.Ident.Camelize}}, err
	}

	// Create Item in table and return
	input := &dynamodb.PutItemInput{
		Item:      av,
		TableName: aws.String(tableName),
	}
	_, err = svc.PutItem(input)
	return {{.Ident.Camelize}}, err
}

// UpdateHandler handles the PUT request and updates a {{.Ident.Camelize}} in the database returning the item on success
func UpdateHandler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	// Log body and pass to the model
	fmt.Println("Received body: ", request.Body)
	{{.Ident.Camelize}}, err := put(request.Body)
	if err != nil {
		fmt.Println("Got error calling Put method")
		fmt.Println(err.Error())
		return events.APIGatewayProxyResponse{Body: "Error", StatusCode: 500}, nil
	}

	// Log and return result
	fmt.Println("Updated item: ", {{.Ident.Camelize}})
	jsonItem, _ := json.MarshalIndent({{.Ident.Camelize}}, "", "  ")
	stringItem := string(jsonItem)
	return events.APIGatewayProxyResponse{Body: stringItem, StatusCode: 200}, nil
}

func main() {
	lambda.Start(UpdateHandler)
}