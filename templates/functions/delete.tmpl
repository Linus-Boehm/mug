package main

import (
	"fmt"
	"os"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/dynamodb"

    {{ range $i := .Imports -}}
    "{{$i}}"
    {{ end -}}
)

{{.String}}

// delete erases the {{.Type}} from DynamoDB
func delete(id string) error {
    var sess *session.Session
	local, err := strconv.ParseBool(os.Getenv("AWS_SAM_LOCAL"))
	if err != nil {
		return err
	}
	// Create dynamo client object locally if running SAM CLI
	if local {
		sess = session.Must(session.NewSession(&aws.Config{
			Endpoint: aws.String("http://dynamodb:8000"),
		}))
	} else {
		sess = session.Must(session.NewSession())
	}
	svc := dynamodb.New(sess)

	// Perform the delete
	input := &dynamodb.DeleteItemInput{
		Key: map[string]*dynamodb.AttributeValue{
			"id": {
				B: []byte(aws.StringValue(aws.String(id))),
			},
		},
		TableName: aws.String(os.Getenv("{{.Ident.ToUpper}}_TABLE_NAME")),
	}

	_, err = svc.DeleteItem(input)
	if err != nil {
		fmt.Println(err.Error())
		return err
	}
	return nil
}

// DeleteHandler handles the DELETE request and delete the {{.Ident.Camelize}} by given id
func DeleteHandler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	// Pass the call to the model with params found in the path
	id := request.PathParameters["id"]
	fmt.Println("Path vars: ", id)
	err := delete(id)
	if err != nil {
		panic(fmt.Sprintf("Failed to find {{.Ident.Camelize}}, %v", err))
	}

	msg := fmt.Sprintf("Deleted {{.Ident.Camelize}} with id: %s \n", id)
	return events.APIGatewayProxyResponse{Body: msg, StatusCode: 200}, nil
}

func main() {
	lambda.Start(DeleteHandler)
}